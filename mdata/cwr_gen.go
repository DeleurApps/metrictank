package mdata

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ChunkWriteRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "TTL":
			z.TTL, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "T0":
			z.T0, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "T0")
				return
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Timestamp":
			z.Timestamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ChunkWriteRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Key"
	err = en.Append(0x85, 0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "TTL"
	err = en.Append(0xa3, 0x54, 0x54, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TTL)
	if err != nil {
		err = msgp.WrapError(err, "TTL")
		return
	}
	// write "T0"
	err = en.Append(0xa2, 0x54, 0x30)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.T0)
	if err != nil {
		err = msgp.WrapError(err, "T0")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ChunkWriteRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Key"
	o = append(o, 0x85, 0xa3, 0x4b, 0x65, 0x79)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "TTL"
	o = append(o, 0xa3, 0x54, 0x54, 0x4c)
	o = msgp.AppendUint32(o, z.TTL)
	// string "T0"
	o = append(o, 0xa2, 0x54, 0x30)
	o = msgp.AppendUint32(o, z.T0)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendTime(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ChunkWriteRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "TTL":
			z.TTL, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
		case "T0":
			z.T0, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "T0")
				return
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Timestamp":
			z.Timestamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ChunkWriteRequest) Msgsize() (s int) {
	s = 1 + 4 + z.Key.Msgsize() + 4 + msgp.Uint32Size + 3 + msgp.Uint32Size + 5 + msgp.BytesPrefixSize + len(z.Data) + 10 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MdWithCwrs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Md":
			err = z.Md.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Md")
				return
			}
		case "Cwrs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cwrs")
				return
			}
			if cap(z.Cwrs) >= int(zb0002) {
				z.Cwrs = (z.Cwrs)[:zb0002]
			} else {
				z.Cwrs = make([]ChunkWriteRequest, zb0002)
			}
			for za0001 := range z.Cwrs {
				err = z.Cwrs[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cwrs", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MdWithCwrs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Md"
	err = en.Append(0x82, 0xa2, 0x4d, 0x64)
	if err != nil {
		return
	}
	err = z.Md.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Md")
		return
	}
	// write "Cwrs"
	err = en.Append(0xa4, 0x43, 0x77, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Cwrs)))
	if err != nil {
		err = msgp.WrapError(err, "Cwrs")
		return
	}
	for za0001 := range z.Cwrs {
		err = z.Cwrs[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Cwrs", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MdWithCwrs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Md"
	o = append(o, 0x82, 0xa2, 0x4d, 0x64)
	o, err = z.Md.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Md")
		return
	}
	// string "Cwrs"
	o = append(o, 0xa4, 0x43, 0x77, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Cwrs)))
	for za0001 := range z.Cwrs {
		o, err = z.Cwrs[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Cwrs", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MdWithCwrs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Md":
			bts, err = z.Md.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Md")
				return
			}
		case "Cwrs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cwrs")
				return
			}
			if cap(z.Cwrs) >= int(zb0002) {
				z.Cwrs = (z.Cwrs)[:zb0002]
			} else {
				z.Cwrs = make([]ChunkWriteRequest, zb0002)
			}
			for za0001 := range z.Cwrs {
				bts, err = z.Cwrs[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cwrs", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MdWithCwrs) Msgsize() (s int) {
	s = 1 + 3 + z.Md.Msgsize() + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Cwrs {
		s += z.Cwrs[za0001].Msgsize()
	}
	return
}
